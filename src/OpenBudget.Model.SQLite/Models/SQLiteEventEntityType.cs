// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Metadata;
using OpenBudget.Model.SQLite.Converters;
using OpenBudget.Model.SQLite.Tables;

#pragma warning disable 219, 612, 618
#nullable disable

namespace SqliteModels
{
    internal partial class SQLiteEventEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "OpenBudget.Model.SQLite.Tables.SQLiteEvent",
                typeof(SQLiteEvent),
                baseEntityType);

            var eventID = runtimeEntityType.AddProperty(
                "EventID",
                typeof(Guid),
                propertyInfo: typeof(SQLiteEvent).GetProperty("EventID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SQLiteEvent).GetField("<EventID>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new GuidConverter());

            var deviceID = runtimeEntityType.AddProperty(
                "DeviceID",
                typeof(Guid),
                propertyInfo: typeof(SQLiteEvent).GetProperty("DeviceID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SQLiteEvent).GetField("<DeviceID>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new GuidConverter());

            var entityID = runtimeEntityType.AddProperty(
                "EntityID",
                typeof(string),
                propertyInfo: typeof(SQLiteEvent).GetProperty("EntityID", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SQLiteEvent).GetField("<EntityID>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var entityType = runtimeEntityType.AddProperty(
                "EntityType",
                typeof(string),
                propertyInfo: typeof(SQLiteEvent).GetProperty("EntityType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SQLiteEvent).GetField("<EntityType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var eventData = runtimeEntityType.AddProperty(
                "EventData",
                typeof(byte[]),
                propertyInfo: typeof(SQLiteEvent).GetProperty("EventData", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SQLiteEvent).GetField("<EventData>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var isIgnored = runtimeEntityType.AddProperty(
                "IsIgnored",
                typeof(bool),
                propertyInfo: typeof(SQLiteEvent).GetProperty("IsIgnored", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SQLiteEvent).GetField("<IsIgnored>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var vectorClock = runtimeEntityType.AddProperty(
                "VectorClock",
                typeof(byte[]),
                propertyInfo: typeof(SQLiteEvent).GetProperty("VectorClock", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SQLiteEvent).GetField("<VectorClock>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var key = runtimeEntityType.AddKey(
                new[] { eventID });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { entityID });

            var index0 = runtimeEntityType.AddIndex(
                new[] { entityType, entityID });

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Events");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
